// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package dbschema

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createBlogsTableStmt, err = db.PrepareContext(ctx, createBlogsTable); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBlogsTable: %w", err)
	}
	if q.createUsersTableStmt, err = db.PrepareContext(ctx, createUsersTable); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUsersTable: %w", err)
	}
	if q.deleteBlogStmt, err = db.PrepareContext(ctx, deleteBlog); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteBlog: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.getBlogByIDStmt, err = db.PrepareContext(ctx, getBlogByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetBlogByID: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.listBlogsStmt, err = db.PrepareContext(ctx, listBlogs); err != nil {
		return nil, fmt.Errorf("error preparing query ListBlogs: %w", err)
	}
	if q.listUsersStmt, err = db.PrepareContext(ctx, listUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsers: %w", err)
	}
	if q.updateBlogStmt, err = db.PrepareContext(ctx, updateBlog); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateBlog: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createBlogsTableStmt != nil {
		if cerr := q.createBlogsTableStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBlogsTableStmt: %w", cerr)
		}
	}
	if q.createUsersTableStmt != nil {
		if cerr := q.createUsersTableStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUsersTableStmt: %w", cerr)
		}
	}
	if q.deleteBlogStmt != nil {
		if cerr := q.deleteBlogStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteBlogStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.getBlogByIDStmt != nil {
		if cerr := q.getBlogByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBlogByIDStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.listBlogsStmt != nil {
		if cerr := q.listBlogsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listBlogsStmt: %w", cerr)
		}
	}
	if q.listUsersStmt != nil {
		if cerr := q.listUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersStmt: %w", cerr)
		}
	}
	if q.updateBlogStmt != nil {
		if cerr := q.updateBlogStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateBlogStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                   DBTX
	tx                   *sql.Tx
	createBlogsTableStmt *sql.Stmt
	createUsersTableStmt *sql.Stmt
	deleteBlogStmt       *sql.Stmt
	deleteUserStmt       *sql.Stmt
	getBlogByIDStmt      *sql.Stmt
	getUserByEmailStmt   *sql.Stmt
	getUserByIDStmt      *sql.Stmt
	listBlogsStmt        *sql.Stmt
	listUsersStmt        *sql.Stmt
	updateBlogStmt       *sql.Stmt
	updateUserStmt       *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                   tx,
		tx:                   tx,
		createBlogsTableStmt: q.createBlogsTableStmt,
		createUsersTableStmt: q.createUsersTableStmt,
		deleteBlogStmt:       q.deleteBlogStmt,
		deleteUserStmt:       q.deleteUserStmt,
		getBlogByIDStmt:      q.getBlogByIDStmt,
		getUserByEmailStmt:   q.getUserByEmailStmt,
		getUserByIDStmt:      q.getUserByIDStmt,
		listBlogsStmt:        q.listBlogsStmt,
		listUsersStmt:        q.listUsersStmt,
		updateBlogStmt:       q.updateBlogStmt,
		updateUserStmt:       q.updateUserStmt,
	}
}
