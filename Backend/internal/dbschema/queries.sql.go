// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package dbschema

import (
	"context"
	"database/sql"
)

const createBlogsTable = `-- name: CreateBlogsTable :one
INSERT INTO blogs (user_id, title, content) VALUES ($1, $2, $3) RETURNING id, user_id, title, content, created_at, updated_at
`

type CreateBlogsTableParams struct {
	UserID  sql.NullInt32 `json:"user_id"`
	Title   string        `json:"title"`
	Content string        `json:"content"`
}

func (q *Queries) CreateBlogsTable(ctx context.Context, arg CreateBlogsTableParams) (Blog, error) {
	row := q.queryRow(ctx, q.createBlogsTableStmt, createBlogsTable, arg.UserID, arg.Title, arg.Content)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUsersTable = `-- name: CreateUsersTable :one
INSERT INTO users (username, email, password) VALUES ($1, $2, $3) RETURNING id, username, email, password, created_at, updated_at
`

type CreateUsersTableParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUsersTable(ctx context.Context, arg CreateUsersTableParams) (User, error) {
	row := q.queryRow(ctx, q.createUsersTableStmt, createUsersTable, arg.Username, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBlog = `-- name: DeleteBlog :exec
DELETE FROM blogs WHERE id = $1
`

func (q *Queries) DeleteBlog(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteBlogStmt, deleteBlog, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, id)
	return err
}

const getBlogByID = `-- name: GetBlogByID :one
SELECT id, user_id, title, content, created_at, updated_at FROM blogs WHERE id = $1
`

func (q *Queries) GetBlogByID(ctx context.Context, id int32) (Blog, error) {
	row := q.queryRow(ctx, q.getBlogByIDStmt, getBlogByID, id)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password, created_at, updated_at FROM users 
WHERE email = $1 
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, password, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.queryRow(ctx, q.getUserByIDStmt, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBlogs = `-- name: ListBlogs :many
SELECT id, user_id, title, content, created_at, updated_at FROM blogs 
ORDER BY created_at DESC 
LIMIT $1 OFFSET $2
`

type ListBlogsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBlogs(ctx context.Context, arg ListBlogsParams) ([]Blog, error) {
	rows, err := q.query(ctx, q.listBlogsStmt, listBlogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Blog{}
	for rows.Next() {
		var i Blog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, email, password, created_at, updated_at FROM users 
ORDER BY created_at DESC 
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.query(ctx, q.listUsersStmt, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBlog = `-- name: UpdateBlog :exec
UPDATE blogs SET 
    title = $1, 
    content = $2, 
    updated_at = CURRENT_TIMESTAMP 
WHERE id = $3
`

type UpdateBlogParams struct {
	Title   string `json:"title"`
	Content string `json:"content"`
	ID      int32  `json:"id"`
}

func (q *Queries) UpdateBlog(ctx context.Context, arg UpdateBlogParams) error {
	_, err := q.exec(ctx, q.updateBlogStmt, updateBlog, arg.Title, arg.Content, arg.ID)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET 
    username = $1, 
    email = $2, 
    password = $3, 
    updated_at = CURRENT_TIMESTAMP 
WHERE id = $4
`

type UpdateUserParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
	ID       int32  `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.exec(ctx, q.updateUserStmt, updateUser,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.ID,
	)
	return err
}
